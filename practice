var person=new Object();
person.name='Nicholas';
person.age=29;
console.log('person');

var person={
	name:'Nicholas',
	age:29,
	5:true
};
console.log('person');

var person = {
	"name":'Nicholas',
	"age":29,
	5:true
};
console.log('person');

var person={};
person.name='Nicholas';
person.age=29;
console.log('person');

function displayInfo(args){
	var output="";
	if(typeof args.name=="string"){
		output+="Name:"+args.name+"\n";
	}
	if(typeof args.age=="number"){
		output+="Age:"+args.age+"\n";
	}
	alert(output);
}
displayInfo({
	name:"Nicholas",
	age:29
});

var colors=new Array();
var colors=new Array(20);
var names=new Array("Greg");
var names=[];
var colors=["red","blue","green"];
alert(colors.length);

var colors=["red","blue","green"];
colors.length=2;
alert(colors[2]);//undifined

var colors=["red","blue","green"];
colors.length=4;
alert(colors[3]);//undifined


var colors=["red","blue","green"];
colors[colors.length]="black";
colors[colors.length]="brown";

var colors=["red","blue","green"];
alert(colors.toString());
alert(colors.valueOf());
alert(colors);
alert(colors.toLocaleString());
alert(colors.join(","));//red,blue,green
alert(colors.join("||"));//red||blue||green

=============栈 LIFO last in first out
var colors=new Array();
var count=colors.push("red","green");
alert(count);
count=colors.push("blank");
alert(count);
var item=colors.pop();
alert(item);
alert(colors.length);

var colors=["red","blue"];
colors.push("brown");
colors[3]="black";
alert(colors.length);
var item=colors.pop();
alert(item);

==============队列 FIFO first in first out
var colors=new Array();
var count=colors.push("red","green");
alert(count);
count=colors.push("black");
alert(count);
var item=colors.shift();
alert(item);
alert(colors.length);

var colors=new Array();
var count=colors.unshift("red","green");
alert(count);
count=colors.unshift("black");
alert(count);
var item=colors.pop();
alert(item);
alert(colors.length);

===============排序
var values=[1,2,3,4,5];
values.reverse();
alert(values);

var values=[1,2,3,4,5];
values.sort();
alert(values);

function compare(value1,value2){
	if(value1<value2){
		return -1;
	}
	if(value1>value2){
		return 1;
	}else{
		return 0;
	}
}
var values=[0,1,5,10,15];
values.sort(compare);
alert(values);

function compare(value1,value2){
	return value2-value1;
}
var values=[0,1,5,10,15];
values.sort(compare);
alert(values);

============concat
var colors = ["red","green","blue"];
var colors2 = colors.concat("yellow",["black","brown"]);
alert(colors);
alert(colors2);

==============slice
var colors = ["red","green","blue","yellow","purple"];
var colors2=colors.slice(1);
var colors3=colors.slice(1,4);
var colors4=colors.slice(2,-1);
alert(colors2);
alert(colors3);
alert(colors4);

===================splice
var colors=["red","green","blue"];
var removed=colors.splice(0,1);
alert(colors);
alert(removed);

removed=colors.splice(1,0,"yellow","orange");
alert(colors);
alert(removed);

removed=colors.splice(1,1,"red","purple");
alert(colors);
alert(removed);

===========indexOf & lastIndexOf
var numbers = [1,2,3,4,5,4,3,2,1];
alert(numbers.indexOf(4));
alert(numbers.lastIndexOf(4));

alert(numbers.indexOf(4,4));
alert(numbers.lastIndexOf(4,4));

var person={name:"Nicholas"};
var people=[{name:"Nicholas"}];
var morePeople=[person];
alert(people.indexOf(person));
alert(morePeople.indexOf(person));

==========
==========迭代 every(),filter(),forEach(),map(),some()

var number=[1,2,3,4,5,4,3,2,1];
var everyResult=number.every(function(item, index, array){
	return (item>2);
});
alert(everyResult);

var everyResult=number.some(function(item, index, array){
	return (item>2);
});
alert(everyResult);

var number=[1,2,3,4,5,4,3,2,1];
var everyResult=number.filter(function(item, index, array){
	return (item>2);
});
alert(everyResult);

var number=[1,2,3,4,5,4,3,2,1];
var everyResult=number.map(function(item, index, array){
	return item*2;
});
alert(everyResult);

var number=[1,2,3,4,5,4,3,2,1];
var everyResult=number.forEach(function(item, index, array){
	xxxxxxxxxxxxxxxxxxxxxx
});

==========
==========归并：reduce(),reduceRight()
var values={1,2,3,4,5};
var sum=values.reduce(function(prev,cur,index,array){
	return prec+cur;
});
alert(sum);

==========Date
var now = new Date();
var somDate=new Date(Date.parse("May 25, 2004"));
var somDate=new Date("May 25, 2004");
var y2k=new Date(Date.UTC(2000,0));
var allFives=new Date(Date.UTC(2005,4,5,17,55,55));
alert(y2k);
alert(allFives);

var start=Date.now();
doSomething;
var stop=+Date.now(), result=stop-start;

var date1=new Date(2007,0,1);
var date2=new Date(2007,1,1);
alert(date1<date2);
alert(date1>date2);
date1.toDateString();
date1.toTimeString();
date1.toLocaleDateString();
date1.toLocaleTimeString();
date1.toUTCString();

========RegExp
var re=null,i;
for(i=0;i<10;i++){
	re=/cat/g;
	re.test("catastrophe");
}

for(i=0;i<10;i++){
	re=new RegExp("cat","g");
	re.test("catastrophe");
}

var text="cat, bat, sat, fat";
var pattern1=/.at/;

var matches=pattern1.exec(text);
alert(matches.index);
alert(matches[0]);
alert(pattern1.lastIndex);

matches=pattern1.exec(text);
alert(matches.index);
alert(matches[0]);
alert(pattern1.lastIndex);

var pattern2=/.at/g;
var matches=pattern2.exec(text);
alert(matches.index);
alert(matches[0]);
alert(pattern2.lastIndex);

matches=pattern2.exec(text);
alert(matches.index);
alert(matches[0]);
alert(pattern2.lastIndex);

var text="000-00-0000";
var pattern=/\d{3}-\d{2}-\d{4}/;
if pattern.test(text){
	alert("The pattern was matched.")
}

matches=pattern2.exec(text);
alert(matches.index);
alert(matches[0]);
alert(pattern2.lastIndex);

var pattern=new RegExp("\\[bc\\]at","gi");
alert(pattern.toString());
alert(pattern.toLocaleString());

=========================函数
function sum(num1,num2){
	return num1+num2;
}

var sum=function(num1,num2){
	return num1+num2;
}

var sum=new Function("num1","num2","return num1+num2");

function factorial(num){
	if (num<=1){
		return 1;
	}else{
		return num * arguments.callee(num-1);
	}
}
var trueFactorial=factorial;
factorial=function(){
	return 0;
}
alert(factorial(5));//0
alert(trueFactorial(5));//120

===this
window.color="red";
var o={color:"blue"};
function sayColor(){
	alert(this.color);
}
sayColor();//"red"
o.sayColor=sayColor;
o.sayColor();//blue

function outer(){
	inner();
}
function inner(){
	alert(inner.caller);
}
outer();//function outer(){inner();}

function outer(){
	inner();
}
function inner(){
	alert(arguments.callee.caller);
}
outer();
function sum(sum1,sum2){
	return sum1+sum2;
}
function callSum1(num1,num2){
	return sum.apply(this,arguments);
}
function callSum2(num1,num2){
	return sum.apply(this,[num1,num2]);
}
alert(callSum1(10,10));
alert(callSum2(10,10));

function sum(sum1,sum2){
	return sum1+sum2;
}
function callSum(num1,num2){
	return sum.call(this,num1,num2);
}
alert(callSum(10,10));
